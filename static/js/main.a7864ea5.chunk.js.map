{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","SpinningMesh","position","args","color","speed","factor","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","onClick","castShadow","ref","attach","MeshWobbleMaterial","App","shadowMap","colorManagement","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAWAA,cAEA,IAAMC,EAAe,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC9CC,EAAOC,iBAAO,MACpBC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAFJ,MAGrCC,oBAAS,GAH4B,mBAG1DC,EAH0D,KAGlDC,EAHkD,KAI3DC,EAAQC,YAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAE3C,OACE,eAAC,IAAER,KAAH,CACEa,QAAS,kBAAMJ,GAAWD,IAC1BI,MAAOF,EAAME,MACbE,YAAU,EACVC,IAAKf,EACLL,SAAUA,EALZ,UAOE,mCAAmBqB,OAAO,WAAWpB,KAAMA,IAC3C,cAACqB,EAAA,EAAD,CACEnB,MAAOA,EACPC,OAAQA,EACRiB,OAAO,WACPnB,MAAOA,QAkEAqB,MA5Df,WACE,OACE,mCACE,eAAC,IAAD,CACEC,WAAS,EACTC,iBAAe,EACfC,OAAQ,CAAE1B,SAAU,EAAE,EAAG,EAAG,IAAK2B,IAAK,IAHxC,UAKE,8BAAcC,UAAW,KACzB,4BAAY5B,SAAU,EAAE,GAAI,GAAI,IAAK4B,UAAW,KAChD,4BAAY5B,SAAU,CAAC,GAAI,GAAI,GAAI4B,UAAW,MAC9C,kCACET,YAAU,EACVnB,SAAU,CAAC,EAAG,GAAI,GAClB4B,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAGzB,kCACE,uBACEC,eAAa,EACb3B,SAAU,EAAE4B,KAAKC,GAAK,EAAG,EAAG,GAC5BtC,SAAU,CAAC,GAAI,EAAG,GAHpB,UAKE,qCAAqBqB,OAAO,WAAWpB,KAAM,CAAC,IAAK,OACnD,gCAAgBoB,OAAO,WAAWkB,QAAS,QAE7C,cAAC,EAAD,CACEvC,SAAU,CAAC,EAAG,EAAG,GACjBC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAM,YACNC,MAAO,EACPC,OAAQ,KAEV,cAAC,EAAD,CACEJ,SAAU,EAAE,EAAG,GAAI,GACnBE,MAAM,OACNC,MAAO,EACPC,OAAQ,KAEV,cAAC,EAAD,CACEJ,SAAU,CAAC,EAAG,GAAI,GAClBE,MAAM,OACNC,MAAO,EACPC,OAAQ,QAIZ,cAACoC,EAAA,EAAD,UCjFOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a7864ea5.chunk.js","sourcesContent":["import React, { uesRef, useRef, useState } from \"react\";\nimport \"./App.scss\";\n\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport {\n  softShadows,\n  MeshWobbleMaterial,\n  OrbitControls,\n} from \"@react-three/drei\";\nimport { useSpring, a } from \"react-spring/three\";\n\nsoftShadows();\n\nconst SpinningMesh = ({ position, args, color, speed, factor }) => {\n  const mesh = useRef(null);\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n  const [expand, setExpand] = useState(false);\n  const props = useSpring({\n    scale: expand ? [1.4, 1.1, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow\n      ref={mesh}\n      position={position}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={args} />\n      <MeshWobbleMaterial\n        speed={speed}\n        factor={factor}\n        attach=\"material\"\n        color={color}\n      />\n    </a.mesh>\n  );\n};\n\nfunction App() {\n  return (\n    <>\n      <Canvas\n        shadowMap\n        colorManagement\n        camera={{ position: [-5, 2, 10], fov: 60 }}\n      >\n        <ambientLight intensity={0.3} />\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n\n        <group>\n          <mesh\n            receiveShadow\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -3, 0]}\n          >\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n            <shadowMaterial attach=\"material\" opacity={0.3} />\n          </mesh>\n          <SpinningMesh\n            position={[0, 1, 0]}\n            args={[3, 2, 1]}\n            color=\"lightblue\"\n            speed={2}\n            factor={0.6}\n          />\n          <SpinningMesh\n            position={[-2, 1, -5]}\n            color=\"pink\"\n            speed={5}\n            factor={0.6}\n          />\n          <SpinningMesh\n            position={[5, 1, -2]}\n            color=\"pink\"\n            speed={5}\n            factor={0.6}\n          />\n        </group>\n\n        <OrbitControls />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}